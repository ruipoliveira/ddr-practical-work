function solution = GreedyRandomized()    Matrizes;    miu = R*1e9/(8*1000);    NumberLinks = sum(sum(R>0));    lambda_s = T*1e6/(8*1000);    gama = sum(sum(lambda_s));    d = L*1e3/2e8;    pairs = [];    for origin = 1:16        for destination = (origin + 1):17            if T(origin, destination) + T(destination, origin)>0                pairs = [pairs; origin destination];            end        end    end    npairs = size(pairs,1);    b = randperm(npairs);    for i = 1:npairs      aux(i,:) = pairs(b(i),:);    end    pairs = aux;    lambda = zeros(17);    routes = zeros(npairs,17);    for i = 1:npairs        origin = pairs(i,1);        destination = pairs(i,2);        AverageDelay = (1./(miu-lambda)+d);        AverageDelay(isnan(AverageDelay))= 0;        r = ShortestPathSym(AverageDelay,origin,destination);        routes(i,:)= r;        j= 1;                while r(j) ~= destination            lambda(r(j),r(j+1)) = lambda(r(j),r(j+1)) + lambda_s(origin,destination);            lambda(r(j+1),r(j)) = lambda(r(j+1),r(j)) + lambda_s(destination,origin);            j= j+1;        end    end    solution.pairs = pairs;    solution.routes = routes;    solution.lambda = lambda;end