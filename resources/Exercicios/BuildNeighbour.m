function NeighbourSolution = BuildNeighbour(solution, i)    Matrizes;    lambda_s = T * 1e6 / (8*1000);    miu = R * 1e9 / (8*1000);    d = L * 1e3 / 2e8;    origin = solution.pairs(i,1);    destination = solution.pairs(i,2);    r = solution.routes(i,:);    j = 1;    while r(j) ~= destination        solution.lambda(r(j),r(j+1)) = solution.lambda(r(j),r(j+1)) - lambda_s(origin,destination);        solution.lambda(r(j+1),r(j)) = solution.lambda(r(j+1),r(j)) - lambda_s(destination,origin);        j= j+1;    end        AverageDelay = (1./(miu-solution.lambda)+d);    r = ShortestPathSym(AverageDelay,origin,destination);        solution.routes(i,:) = r;    j = 1;    while r(j) ~= destination        solution.lambda(r(j),r(j+1)) = solution.lambda(r(j),r(j+1)) + lambda_s(origin,destination);        solution.lambda(r(j+1),r(j))= solution.lambda(r(j+1),r(j)) + lambda_s(destination,origin);        j= j+1;    end        NeighbourSolution.pairs = solution.pairs;    NeighbourSolution.routes = solution.routes;    NeighbourSolution.lambda = solution.lambda;end